# Main TextFlow Plugin configuration
plugin.tx_textflow {
    view {
        templateRootPaths {
            0 = EXT:text_flow/Resources/Private/Templates/
            10 = {$plugin.tx_textflow.view.templateRootPath}
        }
        partialRootPaths {
            0 = EXT:text_flow/Resources/Private/Partials/
            10 = {$plugin.tx_textflow.view.partialRootPath}
        }
        layoutRootPaths {
            0 = EXT:text_flow/Resources/Private/Layouts/
            10 = {$plugin.tx_textflow.view.layoutRootPath}
        }
    }
    persistence {
        storagePid = {$plugin.tx_textflow.persistence.storagePid}
    }
    
    settings {
        # Default text processing settings
        enableHyphenation = 1
        enableSmartQuotes = 1
        showWordCount = 1
        showDebugInformation = 1
        cacheLifetime = 3600
        defaultLanguage = de
    }
    
    features {
        skipDefaultArguments = 1
        requireCHashArgumentForActionArguments = 1
    }
}

# TextFlow integration for all content elements
lib.contentElement {
    stdWrap {
        postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
        postUserFunc.enable = 1
    }
    
    # Apply TextFlow to header
    10 = TEXT
    10 {
        field = header
        stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
        stdWrap.postUserFunc.enable = 1
    }
    
    # Apply TextFlow to subheader
    20 = TEXT
    20 {
        field = subheader
        stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
        stdWrap.postUserFunc.enable = 1
    }
    
    # Apply TextFlow to bodytext
    30 = TEXT
    30 {
        field = bodytext
        stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
        stdWrap.postUserFunc.enable = 1
    }
}

tt_content {
    # Apply TextFlow to all text content elements
    text.stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
    text.stdWrap.postUserFunc.enable = 1
    
    textmedia.stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
    textmedia.stdWrap.postUserFunc.enable = 1
    
    textpic.stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
    textpic.stdWrap.postUserFunc.enable = 1
    
    table.stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
    table.stdWrap.postUserFunc.enable = 1
    
    bullets.stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
    bullets.stdWrap.postUserFunc.enable = 1
    
    header.stdWrap.postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
    header.stdWrap.postUserFunc.enable = 1
}

# TextOptimizer Plugin Configuration
plugin.tx_textflow_textoptimizer = USER
plugin.tx_textflow_textoptimizer {
    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
    extensionName = TextFlow
    pluginName = TextOptimizer
    vendorName = PixelCoda
    
    switchableControllerActions {
        TextFlow {
            1 = optimize
        }
    }
    
    view < plugin.tx_textflow.view
    persistence < plugin.tx_textflow.persistence
    settings < plugin.tx_textflow.settings
}

# Show Plugin Configuration
plugin.tx_textflow_show = USER
plugin.tx_textflow_show {
    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
    extensionName = TextFlow
    pluginName = Show
    vendorName = PixelCoda
    
    view < plugin.tx_textflow.view
    persistence < plugin.tx_textflow.persistence
    settings < plugin.tx_textflow.settings
}

# Include CSS and JavaScript
page {
    includeCSS {
        textflow = EXT:text_flow/Resources/Public/Css/textflow.css
    }
    includeJSFooter {
        textflow = EXT:text_flow/Resources/Public/JavaScript/textflow.js
    }
}

# Configure Content Element rendering
tt_content {
    textflow =< lib.contentElement
    textflow {
        templateName = TextFlow
        templateRootPaths {
            0 = EXT:text_flow/Resources/Private/Templates/Default/
            10 = {$plugin.tx_textflow.view.templateRootPath}Default/
        }
        partialRootPaths {
            0 = EXT:text_flow/Resources/Private/Partials/
            10 = {$plugin.tx_textflow.view.partialRootPath}
        }
        layoutRootPaths {
            0 = EXT:text_flow/Resources/Private/Layouts/
            10 = {$plugin.tx_textflow.view.layoutRootPath}
        }
        dataProcessing {
            10 = TYPO3\CMS\Frontend\DataProcessing\FlexFormProcessor
        }
        settings {
            defaultHeaderType = 2
        }
    }
}

# Plugin configuration
plugin.tx_textflow {
    view {
        templateRootPaths {
            0 = EXT:text_flow/Resources/Private/Templates/
            10 = {$plugin.tx_textflow.view.templateRootPath}
        }
        partialRootPaths {
            0 = EXT:text_flow/Resources/Private/Partials/
            10 = {$plugin.tx_textflow.view.partialRootPath}
        }
        layoutRootPaths {
            0 = EXT:text_flow/Resources/Private/Layouts/
            10 = {$plugin.tx_textflow.view.layoutRootPath}
        }
    }
    
    settings {
        enableHyphenation = 1
        enableSmartQuotes = 1
        showWordCount = 1
        showDebugInformation = 1
    }
}

plugin.tx_textflow_textoptimizer < plugin.tx_textflow
plugin.tx_textflow_textoptimizer {
    settings {
        templateName = TextFlow
    }
}

# TextFlow integration for content parsing
lib.parseFunc_RTE {
    postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
    postUserFunc.enable = 1
}

tt_content {
    text =< lib.contentElement
    text {
        templateName = Text
        dataProcessing {
            10 = TYPO3\CMS\Frontend\DataProcessing\DatabaseQueryProcessor
            10 {
                table = tt_content
                pidInList.field = pid
                where.field = uid
                where.intval = 1
                as = content
            }
        }
        
        stdWrap.parseFunc =< lib.parseFunc_RTE
        stdWrap.parseFunc {
            nonTypoTagStdWrap {
                postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
                postUserFunc.enable = 1
            }
        }
    }
    
    textmedia =< tt_content.text
    textpic =< tt_content.text
    header =< tt_content.text
    bullets =< tt_content.text
}

# Configure default content rendering
lib.contentElement {
    templateRootPaths {
        0 = EXT:fluid_styled_content/Resources/Private/Templates/
        10 = EXT:text_flow/Resources/Private/Templates/
    }
    partialRootPaths {
        0 = EXT:fluid_styled_content/Resources/Private/Partials/
        10 = EXT:text_flow/Resources/Private/Partials/
    }
    layoutRootPaths {
        0 = EXT:fluid_styled_content/Resources/Private/Layouts/
        10 = EXT:text_flow/Resources/Private/Layouts/
    }
    
    stdWrap {
        parseFunc =< lib.parseFunc_RTE
        parseFunc {
            nonTypoTagStdWrap {
                postUserFunc = PixelCoda\TextFlow\Service\TextFlowService->hyphenate
                postUserFunc.enable = 1
            }
        }
    }
}